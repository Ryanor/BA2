#!/usr/bin/env node
/**
 * File www is the entry point for the web application.
 * It is used as frontend, backend and integrates the REST API as routes.
 * It defines the listening port for the web application to 3000.
 *
 * @class www
 * @main
 * @uses app
 *
 * @author gwu
 * @version 1.0
 */

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');

var server;
var port;

/**
 * Get port from environment and store in Express.
 *
 * @method normalizePort
 * @param {Mixed} port Port input from mixed source
 * @return {String|Number} port Port number as mixed source
 * @for www
 */
port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server using the express application middleware.
 *
 * @method createServer
 * @param {Object} app Express middleware variable
 * @return {Object} server Object of server
 * @for www
 */
server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 *
 * @method listen
 * @param {String|Number} port Port number
 * @return {Object} server Object of server listening on port
 * @for www
 */
server.listen(port);

/**
 * Server error event
 *
 * @event error
 * @for www
 */
server.on('error', onError);

/**
 * Server listening event
 *
 * @event listening
 * @for www
 */
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 *
 * @method normalizePort
 * @param {Mixed} val Port number from mixed source
 * @return {String|Number} port Port as number or string
 * @for www
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 *
 * @method onError
 * @param {Event} error Error event
 * @throws error
 * @for www
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 *
 * @method onListening
 * @for www
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
